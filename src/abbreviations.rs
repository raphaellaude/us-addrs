use lazy_static::lazy_static;
use std::collections::HashMap;

lazy_static! {
    pub static ref STREET_NAMES: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        // USPS Street Abbreviations (C1)
        m.insert("alley", "aly");
        m.insert("anex", "anx");
        m.insert("arcade", "arc");
        m.insert("avenue", "ave");
        m.insert("bayou", "byu");
        m.insert("beach", "bch");
        m.insert("bend", "bnd");
        m.insert("bluff", "blf");
        m.insert("bluffs", "blfs");
        m.insert("bottom", "btm");
        m.insert("boulevard", "blvd");
        m.insert("branch", "br");
        m.insert("bridge", "brg");
        m.insert("brook", "brk");
        m.insert("brooks", "brks");
        m.insert("burg", "bg");
        m.insert("burgs", "bgs");
        m.insert("bypass", "byp");
        m.insert("camp", "cp");
        m.insert("canyon", "cyn");
        m.insert("cape", "cpe");
        m.insert("causeway", "cswy");
        m.insert("center", "ctr");
        m.insert("centers", "ctrs");
        m.insert("circle", "cir");
        m.insert("circles", "cirs");
        m.insert("cliff", "clf");
        m.insert("cliffs", "clfs");
        m.insert("club", "clb");
        m.insert("common", "cmn");
        m.insert("commons", "cmns");
        m.insert("corner", "cor");
        m.insert("corners", "cors");
        m.insert("course", "crse");
        m.insert("court", "ct");
        m.insert("courts", "cts");
        m.insert("cove", "cv");
        m.insert("coves", "cvs");
        m.insert("creek", "crk");
        m.insert("crescent", "cres");
        m.insert("crest", "crst");
        m.insert("crossing", "xing");
        m.insert("crossroad", "xrd");
        m.insert("crossroads", "xrds");
        m.insert("curve", "curv");
        m.insert("dale", "dl");
        m.insert("dam", "dm");
        m.insert("divide", "dv");
        m.insert("drive", "dr");
        m.insert("drives", "drs");
        m.insert("estate", "est");
        m.insert("estates", "ests");
        m.insert("expressway", "expy");
        m.insert("extension", "ext");
        m.insert("extensions", "exts");
        m.insert("fall", "fall");
        m.insert("falls", "fls");
        m.insert("ferry", "fry");
        m.insert("field", "fld");
        m.insert("fields", "flds");
        m.insert("flat", "flt");
        m.insert("flats", "flts");
        m.insert("ford", "frd");
        m.insert("fords", "frds");
        m.insert("forest", "frst");
        m.insert("forge", "frg");
        m.insert("forges", "frgs");
        m.insert("fork", "frk");
        m.insert("forks", "frks");
        m.insert("fort", "ft");
        m.insert("freeway", "fwy");
        m.insert("garden", "gdn");
        m.insert("gardens", "gdns");
        m.insert("gateway", "gtwy");
        m.insert("glen", "gln");
        m.insert("glens", "glns");
        m.insert("green", "grn");
        m.insert("greens", "grns");
        m.insert("grove", "grv");
        m.insert("groves", "grvs");
        m.insert("harbor", "hbr");
        m.insert("harbors", "hbrs");
        m.insert("haven", "hvn");
        m.insert("heights", "hts");
        m.insert("highway", "hwy");
        m.insert("hill", "hl");
        m.insert("hills", "hls");
        m.insert("hollow", "holw");
        m.insert("inlet", "inlt");
        m.insert("island", "is");
        m.insert("islands", "iss");
        m.insert("isle", "isle");
        m.insert("junction", "jct");
        m.insert("junctions", "jcts");
        m.insert("key", "ky");
        m.insert("keys", "kys");
        m.insert("knoll", "knl");
        m.insert("knolls", "knls");
        m.insert("lake", "lk");
        m.insert("lakes", "lks");
        m.insert("land", "land");
        m.insert("landing", "lndg");
        m.insert("lane", "ln");
        m.insert("light", "lgt");
        m.insert("lights", "lgts");
        m.insert("loaf", "lf");
        m.insert("lock", "lck");
        m.insert("locks", "lcks");
        m.insert("lodge", "ldg");
        m.insert("loop", "loop");
        m.insert("mall", "mall");
        m.insert("manor", "mnr");
        m.insert("manors", "mnrs");
        m.insert("meadow", "mdw");
        m.insert("meadows", "mdws");
        m.insert("mews", "mews");
        m.insert("mill", "ml");
        m.insert("mills", "mls");
        m.insert("mission", "msn");
        m.insert("motorway", "mtwy");
        m.insert("mount", "mt");
        m.insert("mountain", "mtn");
        m.insert("mountains", "mtns");
        m.insert("neck", "nck");
        m.insert("orchard", "orch");
        m.insert("oval", "oval");
        m.insert("overpass", "opas");
        m.insert("park", "park");
        m.insert("parks", "park");
        m.insert("parkway", "pkwy");
        m.insert("parkways", "pkwy");
        m.insert("pass", "pass");
        m.insert("passage", "psge");
        m.insert("path", "path");
        m.insert("pike", "pike");
        m.insert("pine", "pne");
        m.insert("pines", "pnes");
        m.insert("place", "pl");
        m.insert("plain", "pln");
        m.insert("plains", "plns");
        m.insert("plaza", "plz");
        m.insert("point", "pt");
        m.insert("points", "pts");
        m.insert("port", "prt");
        m.insert("ports", "prts");
        m.insert("prairie", "pr");
        m.insert("radial", "radl");
        m.insert("ramp", "ramp");
        m.insert("ranch", "rnch");
        m.insert("rapid", "rpd");
        m.insert("rapids", "rpds");
        m.insert("rest", "rst");
        m.insert("ridge", "rdg");
        m.insert("ridges", "rdgs");
        m.insert("river", "riv");
        m.insert("road", "rd");
        m.insert("roads", "rds");
        m.insert("route", "rte");
        m.insert("row", "row");
        m.insert("rue", "rue");
        m.insert("run", "run");
        m.insert("shoal", "shl");
        m.insert("shoals", "shls");
        m.insert("shore", "shr");
        m.insert("shores", "shrs");
        m.insert("skyway", "skwy");
        m.insert("spring", "spg");
        m.insert("springs", "spgs");
        m.insert("spur", "spur");
        m.insert("spurs", "spur");
        m.insert("square", "sq");
        m.insert("squares", "sqs");
        m.insert("station", "sta");
        m.insert("stravenue", "stra");
        m.insert("stream", "strm");
        m.insert("street", "st");
        m.insert("streets", "sts");
        m.insert("summit", "smt");
        m.insert("terrace", "ter");
        m.insert("throughway", "trwy");
        m.insert("trace", "trce");
        m.insert("track", "trak");
        m.insert("trafficway", "trfy");
        m.insert("trail", "trl");
        m.insert("trailer", "trlr");
        m.insert("tunnel", "tunl");
        m.insert("turnpike", "tpke");
        m.insert("underpass", "upas");
        m.insert("union", "un");
        m.insert("unions", "uns");
        m.insert("valley", "vly");
        m.insert("valleys", "vlys");
        m.insert("viaduct", "via");
        m.insert("view", "vw");
        m.insert("views", "vws");
        m.insert("village", "vlg");
        m.insert("villages", "vlgs");
        m.insert("ville", "vl");
        m.insert("vista", "vis");
        m.insert("walk", "walk");
        m.insert("walks", "walk");
        m.insert("wall", "wall");
        m.insert("way", "way");
        m.insert("ways", "ways");
        m.insert("well", "wl");
        m.insert("wells", "wls");
        m.insert("allee", "aly");
        m.insert("ally", "aly");
        m.insert("aly", "aly");
        m.insert("annex", "anx");
        m.insert("annx", "anx");
        m.insert("anx", "anx");
        m.insert("arc", "arc");
        m.insert("av", "ave");
        m.insert("ave", "ave");
        m.insert("aven", "ave");
        m.insert("avenu", "ave");
        m.insert("avn", "ave");
        m.insert("avnue", "ave");
        m.insert("bayoo", "byu");
        m.insert("bch", "bch");
        m.insert("bnd", "bnd");
        m.insert("blf", "blf");
        m.insert("bluf", "blf");
        m.insert("bot", "btm");
        m.insert("btm", "btm");
        m.insert("bottm", "btm");
        m.insert("blvd", "blvd");
        m.insert("boul", "blvd");
        m.insert("boulv", "blvd");
        m.insert("br", "br");
        m.insert("brnch", "br");
        m.insert("brdge", "brg");
        m.insert("brg", "brg");
        m.insert("brk", "brk");
        m.insert("byp", "byp");
        m.insert("bypa", "byp");
        m.insert("bypas", "byp");
        m.insert("byps", "byp");
        m.insert("cp", "cp");
        m.insert("cmp", "cp");
        m.insert("canyn", "cyn");
        m.insert("cnyn", "cyn");
        m.insert("cpe", "cpe");
        m.insert("causwa", "cswy");
        m.insert("cswy", "cswy");
        m.insert("cen", "ctr");
        m.insert("cent", "ctr");
        m.insert("centr", "ctr");
        m.insert("centre", "ctr");
        m.insert("cnter", "ctr");
        m.insert("cntr", "ctr");
        m.insert("ctr", "ctr");
        m.insert("cir", "cir");
        m.insert("circ", "cir");
        m.insert("circl", "cir");
        m.insert("crcl", "cir");
        m.insert("crcle", "cir");
        m.insert("clf", "clf");
        m.insert("clfs", "clfs");
        m.insert("clb", "clb");
        m.insert("cor", "cor");
        m.insert("cors", "cors");
        m.insert("crse", "crse");
        m.insert("ct", "ct");
        m.insert("cts", "cts");
        m.insert("cv", "cv");
        m.insert("crk", "crk");
        m.insert("cres", "cres");
        m.insert("crsent", "cres");
        m.insert("crsnt", "cres");
        m.insert("crssng", "xing");
        m.insert("xing", "xing");
        m.insert("dl", "dl");
        m.insert("dm", "dm");
        m.insert("div", "dv");
        m.insert("dv", "dv");
        m.insert("dvd", "dv");
        m.insert("dr", "dr");
        m.insert("driv", "dr");
        m.insert("drv", "dr");
        m.insert("est", "est");
        m.insert("ests", "ests");
        m.insert("exp", "expy");
        m.insert("expr", "expy");
        m.insert("express", "expy");
        m.insert("expw", "expy");
        m.insert("expy", "expy");
        m.insert("ext", "ext");
        m.insert("extn", "ext");
        m.insert("extnsn", "ext");
        m.insert("exts", "exts");
        m.insert("fls", "fls");
        m.insert("frry", "fry");
        m.insert("fry", "fry");
        m.insert("fld", "fld");
        m.insert("flds", "flds");
        m.insert("flt", "flt");
        m.insert("flts", "flts");
        m.insert("frd", "frd");
        m.insert("forests", "frst");
        m.insert("frst", "frst");
        m.insert("forg", "frg");
        m.insert("frg", "frg");
        m.insert("frk", "frk");
        m.insert("frks", "frks");
        m.insert("frt", "ft");
        m.insert("ft", "ft");
        m.insert("freewy", "fwy");
        m.insert("frway", "fwy");
        m.insert("frwy", "fwy");
        m.insert("fwy", "fwy");
        m.insert("gardn", "gdn");
        m.insert("grden", "gdn");
        m.insert("grdn", "gdn");
        m.insert("gdns", "gdns");
        m.insert("grdns", "gdns");
        m.insert("gatewy", "gtwy");
        m.insert("gatway", "gtwy");
        m.insert("gtway", "gtwy");
        m.insert("gtwy", "gtwy");
        m.insert("gln", "gln");
        m.insert("grn", "grn");
        m.insert("grov", "grv");
        m.insert("grv", "grv");
        m.insert("harb", "hbr");
        m.insert("harbr", "hbr");
        m.insert("hbr", "hbr");
        m.insert("hrbor", "hbr");
        m.insert("hvn", "hvn");
        m.insert("ht", "hts");
        m.insert("hts", "hts");
        m.insert("highwy", "hwy");
        m.insert("hiway", "hwy");
        m.insert("hiwy", "hwy");
        m.insert("hway", "hwy");
        m.insert("hwy", "hwy");
        m.insert("hl", "hl");
        m.insert("hls", "hls");
        m.insert("hllw", "holw");
        m.insert("hollows", "holw");
        m.insert("holw", "holw");
        m.insert("holws", "holw");
        m.insert("inlt", "inlt");
        m.insert("is", "is");
        m.insert("islnd", "is");
        m.insert("islnds", "iss");
        m.insert("iss", "iss");
        m.insert("isles", "isle");
        m.insert("jct", "jct");
        m.insert("jction", "jct");
        m.insert("jctn", "jct");
        m.insert("junctn", "jct");
        m.insert("juncton", "jct");
        m.insert("jctns", "jcts");
        m.insert("jcts", "jcts");
        m.insert("ky", "ky");
        m.insert("kys", "kys");
        m.insert("knl", "knl");
        m.insert("knol", "knl");
        m.insert("knls", "knls");
        m.insert("lk", "lk");
        m.insert("lks", "lks");
        m.insert("lndg", "lndg");
        m.insert("lndng", "lndg");
        m.insert("ln", "ln");
        m.insert("lgt", "lgt");
        m.insert("lf", "lf");
        m.insert("lck", "lck");
        m.insert("lcks", "lcks");
        m.insert("ldg", "ldg");
        m.insert("ldge", "ldg");
        m.insert("lodg", "ldg");
        m.insert("loops", "loop");
        m.insert("mnr", "mnr");
        m.insert("mnrs", "mnrs");
        m.insert("mdw", "mdws");
        m.insert("mdws", "mdws");
        m.insert("medows", "mdws");
        m.insert("missn", "msn");
        m.insert("mssn", "msn");
        m.insert("mnt", "mt");
        m.insert("mt", "mt");
        m.insert("mntain", "mtn");
        m.insert("mntn", "mtn");
        m.insert("mountin", "mtn");
        m.insert("mtin", "mtn");
        m.insert("mtn", "mtn");
        m.insert("mntns", "mtns");
        m.insert("nck", "nck");
        m.insert("orch", "orch");
        m.insert("orchrd", "orch");
        m.insert("ovl", "oval");
        m.insert("prk", "park");
        m.insert("parkwy", "pkwy");
        m.insert("pkway", "pkwy");
        m.insert("pkwy", "pkwy");
        m.insert("pky", "pkwy");
        m.insert("pkwys", "pkwy");
        m.insert("paths", "path");
        m.insert("pikes", "pike");
        m.insert("pnes", "pnes");
        m.insert("pl", "pl");
        m.insert("pln", "pln");
        m.insert("plns", "plns");
        m.insert("plz", "plz");
        m.insert("plza", "plz");
        m.insert("pt", "pt");
        m.insert("pts", "pts");
        m.insert("prt", "prt");
        m.insert("prts", "prts");
        m.insert("pr", "pr");
        m.insert("prr", "pr");
        m.insert("rad", "radl");
        m.insert("radiel", "radl");
        m.insert("radl", "radl");
        m.insert("ranches", "rnch");
        m.insert("rnch", "rnch");
        m.insert("rnchs", "rnch");
        m.insert("rpd", "rpd");
        m.insert("rpds", "rpds");
        m.insert("rst", "rst");
        m.insert("rdg", "rdg");
        m.insert("rdge", "rdg");
        m.insert("rdgs", "rdgs");
        m.insert("riv", "riv");
        m.insert("rvr", "riv");
        m.insert("rivr", "riv");
        m.insert("rd", "rd");
        m.insert("rds", "rds");
        m.insert("shl", "shl");
        m.insert("shls", "shls");
        m.insert("shoar", "shr");
        m.insert("shr", "shr");
        m.insert("shoars", "shrs");
        m.insert("shrs", "shrs");
        m.insert("spg", "spg");
        m.insert("spng", "spg");
        m.insert("sprng", "spg");
        m.insert("spgs", "spgs");
        m.insert("spngs", "spgs");
        m.insert("sprngs", "spgs");
        m.insert("sq", "sq");
        m.insert("sqr", "sq");
        m.insert("sqre", "sq");
        m.insert("squ", "sq");
        m.insert("sqrs", "sqs");
        m.insert("sta", "sta");
        m.insert("statn", "sta");
        m.insert("stn", "sta");
        m.insert("stra", "stra");
        m.insert("strav", "stra");
        m.insert("straven", "stra");
        m.insert("stravn", "stra");
        m.insert("strvn", "stra");
        m.insert("strvnue", "stra");
        m.insert("streme", "strm");
        m.insert("strm", "strm");
        m.insert("strt", "st");
        m.insert("st", "st");
        m.insert("str", "st");
        m.insert("smt", "smt");
        m.insert("sumit", "smt");
        m.insert("sumitt", "smt");
        m.insert("ter", "ter");
        m.insert("terr", "ter");
        m.insert("traces", "trce");
        m.insert("trce", "trce");
        m.insert("tracks", "trak");
        m.insert("trak", "trak");
        m.insert("trk", "trak");
        m.insert("trks", "trak");
        m.insert("trails", "trl");
        m.insert("trl", "trl");
        m.insert("trls", "trl");
        m.insert("trlr", "trlr");
        m.insert("trlrs", "trlr");
        m.insert("tunel", "tunl");
        m.insert("tunl", "tunl");
        m.insert("tunls", "tunl");
        m.insert("tunnels", "tunl");
        m.insert("tunnl", "tunl");
        m.insert("trnpk", "tpke");
        m.insert("turnpk", "tpke");
        m.insert("un", "un");
        m.insert("vally", "vly");
        m.insert("vlly", "vly");
        m.insert("vly", "vly");
        m.insert("vlys", "vlys");
        m.insert("vdct", "via");
        m.insert("via", "via");
        m.insert("viadct", "via");
        m.insert("vw", "vw");
        m.insert("vws", "vws");
        m.insert("vill", "vlg");
        m.insert("villag", "vlg");
        m.insert("villg", "vlg");
        m.insert("villiage", "vlg");
        m.insert("vlg", "vlg");
        m.insert("vlgs", "vlgs");
        m.insert("vl", "vl");
        m.insert("vis", "vis");
        m.insert("vist", "vis");
        m.insert("vst", "vis");
        m.insert("vsta", "vis");
        m.insert("wy", "way");
        m.insert("wls", "wls");
        m
    };
}

// USPS Two–Letter State and Possession Abbreviations (Appendix B)
// Geographical Directional
lazy_static! {
    pub static ref DIRECTIONALS: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        m.insert("north", "n");
        m.insert("northeast", "ne");
        m.insert("northwest", "nw");
        m.insert("south", "s");
        m.insert("southeast", "se");
        m.insert("southwest", "sw");
        m.insert("east", "e");
        m.insert("west", "w");
        m
    };
}

lazy_static! {
    pub static ref PHRASE_ABBREVS: HashMap<&'static str, &'static str> = {
        let mut m = HashMap::new();
        m.insert("alabama", "al");
        m.insert("alaska", "ak");
        m.insert("american samoa", "as");
        m.insert("arizona", "az");
        m.insert("arkansas", "ar");
        m.insert("california", "ca");
        m.insert("colorado", "co");
        m.insert("connecticut", "ct");
        m.insert("delaware", "de");
        m.insert("district of columbia", "dc");
        m.insert("federated states of micronesia", "fm");
        m.insert("florida", "fl");
        m.insert("georgia", "ga");
        m.insert("guam", "gu");
        m.insert("hawaii", "hi");
        m.insert("idaho", "id");
        m.insert("illinois", "il");
        m.insert("indiana", "in");
        m.insert("iowa", "ia");
        m.insert("kansas", "ks");
        m.insert("kentucky", "ky");
        m.insert("louisiana", "la");
        m.insert("maine", "me");
        m.insert("marshall islands", "mh");
        m.insert("maryland", "md");
        m.insert("massachusetts", "ma");
        m.insert("michigan", "mi");
        m.insert("minnesota", "mn");
        m.insert("mississippi", "ms");
        m.insert("missouri", "mo");
        m.insert("montana", "mt");
        m.insert("nebraska", "ne");
        m.insert("nevada", "nv");
        m.insert("new hampshire", "nh");
        m.insert("new jersey", "nj");
        m.insert("new mexico", "nm");
        m.insert("new york", "ny");
        m.insert("north carolina", "nc");
        m.insert("north dakota", "nd");
        m.insert("northern mariana islands", "mp");
        m.insert("ohio", "oh");
        m.insert("oklahoma", "ok");
        m.insert("oregon", "or");
        m.insert("palau", "pw");
        m.insert("pennsylvania", "pa");
        m.insert("puerto rico", "pr");
        m.insert("rhode island", "ri");
        m.insert("south carolina", "sc");
        m.insert("south dakota", "sd");
        m.insert("tennessee", "tn");
        m.insert("texas", "tx");
        m.insert("utah", "ut");
        m.insert("vermont", "vt");
        m.insert("virgin islands", "vi");
        m.insert("virginia", "va");
        m.insert("washington", "wa");
        m.insert("west virginia", "wv");
        m.insert("wisconsin", "wi");
        m.insert("wyoming", "wy");
        m
    };
}
